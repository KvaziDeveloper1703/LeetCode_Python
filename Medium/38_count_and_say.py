'''
You are given a positive integer n. Implement the function count_and_say(n) that returns the nth term of the count-and-say sequence.
The count-and-say sequence is defined as follows:
    + count_and_say(1) = "1";
    + For n > 1, count_and_say(n) is generated by applying run-length encoding to the result of count_and_say(n - 1).

Run-Length Encoding means describing a string by counting consecutive repeating characters and then writing the count followed by the character.

For example, compressing the string "3322251" using RLE gives "23321511":
    + "33" → "23"
    + "222" → "32"
    + "5" → "15"
    + "1" → "11"

Вам дано положительное целое число n. Реализуйте функцию count_and_say(n), которая возвращает n-й элемент последовательности "считай и говори".
Последовательность "считай и говори" определяется следующим образом:
    + count_and_say(1) = "1";
    + Для n > 1 следующий элемент строится как RLE-кодирование предыдущего.

Run-Length Encoding — это способ описания строки путём подсчёта подряд идущих одинаковых символов, после чего записывается количество и сам символ.

Пример: строка "3322251" после RLE-кодирования превращается в "23321511":
    + "33" → "23"
    + "222" → "32"
    + "5" → "15"
    + "1" → "11"
'''

def count_and_say(n: int) -> str:
    if n == 1:
        return "1"

    result = "1"

    for _ in range(n - 1):
        current = ""
        i = 0

        while i < len(result):
            count = 1

            while i + 1 < len(result) and result[i] == result[i + 1]:
                i += 1
                count += 1

            current += str(count) + result[i]
            i += 1

        result = current

    return result